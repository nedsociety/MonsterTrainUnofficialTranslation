# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: buildcheck

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  download_basegame:
    runs-on: ubuntu-latest
    container: cm2network/steamcmd
    defaults:
      run:
        shell: bash
        working-directory: /home/steam/steamcmd
    env:
      SteamId: ${{ secrets.STEAMID }}
      SteamPw: ${{ secrets.STEAMPW }}
      MonsterTrainAppId: 1102190
      ModLoaderWorkshopId: 2187468759
    steps:
      - name: Test
        env:
          TEST_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_SECRET: ${{ secrets.STEAMID }}
        run: |
          echo ${#TEST_GITHUB_TOKEN}
          echo ${#TEST_SECRET}
      - name: Download the main game and the BepInEx dependencies
        run: >
          ./steamcmd.sh
          +login $SteamId $SteamPw
          +@sSteamCmdForcePlatformType windows
          +force_install_dir ./steamdir
          +workshop_download_item $MonsterTrainAppId $ModLoaderWorkshopId
          +force_install_dir "./steamdir/steamapps/common/Monster Train/"
          +app_update $MonsterTrainAppId
          +quit
        
      - name: Cache the files (only DLLs are needed)
        uses: actions/upload-artifact@v2
        with:
          name: steamdir
          path: steamdir/**/*.dll

  build:
    runs-on: windows-latest
    needs: download_basegame

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore the binaries from Steam
        uses: actions/download-artifact@v2
        with:
          name: steamdir

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # Add MSBuild to the PATH
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Build
      - name: Build the solution
        run: msbuild MonsterTrainUnofficialTranslation.sln /t:Rebuild /p:Configuration=Release
